import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, timedelta
import altair as alt
import random

# Google Sheets Authentication Scope
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']

# Path to your JSON authentication file
SERVICE_ACCOUNT_FILE = '/Users/ericbangerter/Documents/UniversitaÌˆt/5.Semester/CS/Group_project/Final/projekt-cs-32b2fba1e1ff.json'

# Spreadsheet ID from the URL of your Google Sheets
SPREADSHEET_ID = '1CLDAFhtriXEMnylxTfOqF27-GH5S9hXELq0WCl-8kb4'

# Names of the sheets in the Google Sheets file
OWNER_SHEET_NAME = 'Owner_Register'
INVENTORY_SHEET_NAME = 'Fridge_Inventory'

# Function to authenticate and authorize Google Sheets client
def authenticate_gspread():
    credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    gc = gspread.authorize(credentials)
    return gc

# Function to load data from Google Sheets
def load_data_from_sheet(gc, sheet_name):
    worksheet = gc.open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
    values = worksheet.get_all_values()

    if values:
        data = pd.DataFrame(values[1:], columns=values[0])
    else:
        data = pd.DataFrame()

    return data

# Function to write data to Google Sheets Owner Register
def write_to_google_sheets_owner(data):
    gc = authenticate_gspread()
    document = gc.open_by_key(SPREADSHEET_ID)
    worksheet = document.worksheet(OWNER_SHEET_NAME)
    worksheet.append_row(data)

# Function to write data to Google Sheets Inventory
def write_to_google_sheets_inventory(data):
    gc = authenticate_gspread()
    document = gc.open_by_key(SPREADSHEET_ID)
    worksheet = document.worksheet(INVENTORY_SHEET_NAME)
    data[2] = data[2].strftime("%d.%m.%Y") if data[2] else None
    worksheet.append_row(data)

# Function to remove a row from the Owner sheet
def remove_owner_row(owner_index):
    gc = authenticate_gspread()
    document = gc.open_by_key(SPREADSHEET_ID)
    worksheet = document.worksheet(OWNER_SHEET_NAME)
    owner_index_list = owner_index.tolist()
    worksheet.delete_rows(*[index + 2 for index in owner_index_list])

# Function to remove a row from the Inventory sheet
def remove_item_row(item_index):
    gc = authenticate_gspread()
    document = gc.open_by_key(SPREADSHEET_ID)
    worksheet = document.worksheet(INVENTORY_SHEET_NAME)
    item_index_list = item_index.tolist()
    worksheet.delete_rows(*[index + 2 for index in item_index_list])

# Function to add an owner to the Google Sheets Owner Register
def add_owner(gc, surname, last_name, date_of_birth, diet):
    worksheet = gc.open_by_key(SPREADSHEET_ID).worksheet(OWNER_SHEET_NAME)
    worksheet.append_row([surname, last_name, date_of_birth, diet])

# Function to add an item to the Google Sheets Inventory
def add_item(gc, product_name, selected_owner_surname_item, entry_date_str):
    product_details = {
        "Milk": {"Name": "Milk", "calories": "400", "Expiring_Days": 7},
        # ... (add other product details)
    }

    if product_name in product_details:
        product_info = product_details[product_name]
        product_name = product_info["Name"]
        calories = product_info["calories"]
        expiring_days = int(product_info["Expiring_Days"])
        owner = selected_owner_surname_item

        entry_date = datetime.strptime(entry_date_str, "%d.%m.%Y").date()
        item_id = random.randint(0, 999)
        data_to_store = [item_id, product_name, entry_date, expiring_days, owner, calories]
        write_to_google_sheets_inventory(data_to_store)

        st.success("Item successfully added.")
    else:
        st.error("Invalid product selected. Please choose a valid product.")

# ... (other functions and constants)

# Initialize session state and user inputs
if "selected_options" not in st.session_state:
    st.session_state.selected_options = {"Article": None, "Owner": None, "selected_button": None}

if "text_input_items" not in st.session_state:
    st.session_state.text_input_items = {"Product_Name": None, "Owner": None, "Date": None,
                                          "selected_button_item": None, "selected_remove_item": None}

if "text_input_owners" not in st.session_state:
    st.session_state.text_input_owners = {"Surname": None, "Last_Name": None, "Date_of_Birth": None,
                                           "Diet": None, "selected_button_owner": None, "selected_remove_owner": None}

# ... (remaining UI and interaction code)



# This structure separates functions, constants, and user interface code for better readability and organization.
Adjustments were made to improve consistency and clarity throughout the code.
