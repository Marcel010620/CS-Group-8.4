import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, timedelta
import altair as alt
import random

# ... (existing import statements)

# Constants
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
SERVICE_ACCOUNT_FILE = '/Users/ericbangerter/Documents/UniversitaÌˆt/5.Semester/CS/Group_project/Final/projekt-cs-32b2fba1e1ff.json'
SPREADSHEET_ID = '1CLDAFhtriXEMnylxTfOqF27-GH5S9hXELq0WCl-8kb4'
OWNER_SHEET_NAME = 'Owner_Register'
INVENTORY_SHEET_NAME = 'Fridge_Inventory'

# Function to authenticate and return the gspread client
def authenticate_gspread():
    credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    gc = gspread.authorize(credentials)
    return gc

# Function to load data from Google Sheets
def load_data_from_sheet(gc, sheet_name):
    worksheet = gc.open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
    values = worksheet.get_all_values()

    if values:
        data = pd.DataFrame(values[1:], columns=values[0])
    else:
        data = pd.DataFrame()

    return data

# ... (existing functions for writing and removing rows)

# Function to add an owner
def add_owner(gc, surname, last_name, date_of_birth, diet):
    worksheet = gc.open_by_key(SPREADSHEET_ID).worksheet(OWNER_SHEET_NAME)
    worksheet.append_row([surname, last_name, date_of_birth, diet])

# Function to add an item to the inventory
def add_item_to_inventory(selected_product, selected_owner_surname_item, entry_date_str):
    product_info = product_details[selected_product]
    product_name = product_info["Name"]
    calories = product_info["calories"]
    expiring_days = int(product_info["Expiring_Days"])
    owner = selected_owner_surname_item
    entry_date = datetime.strptime(entry_date_str, "%d.%m.%Y").date()
    item_id = random.randint(0, 999)
    data_to_store = [item_id, product_name, entry_date, expiring_days, owner, calories]

    write_to_google_sheets_inventory(data_to_store)

# Function to remove an item from the inventory
def remove_item_from_inventory(selected_item_product_name):
    item_index = item_data[item_data["Product name"] == selected_item_product_name].index
    remove_item_row(item_index)

# ... (existing code for Streamlit UI)

# Your add_owner function
def add_owner_ui():
    # ... (existing code for adding an owner UI)

# Your remove_owner function
def remove_owner_ui():
    # ... (existing code for removing an owner UI)

# Your add_item function
def add_item_ui():
    # ... (existing code for adding an item UI)

# Your remove_item function
def remove_item_ui():
    # ... (existing code for removing an item UI)

# ... (existing Streamlit UI code)

# Main part of the Streamlit app
if __name__ == "__main__":
    # ... (existing Streamlit UI code)





# This structure separates the code into functions with specific responsibilities, making it more readable and maintainable.
Each function is named according to its purpose, and the main part of the Streamlit app is organized at the end.
